// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract Marketplace {
    struct Product {
        uint256 id;
        string name;
        uint256 price;
        string description;
        string imageURL;
        address payable seller;
        address buyer;
    }

    uint256 public productCount;
    mapping(uint256 => Product) public products;
    mapping(address => uint256[]) public purchaseHistory;
    mapping(address => uint256[]) public salesHistory;

    event ProductListed(uint256 id, string name, uint256 price, address seller);
    event ProductPurchased(uint256 id, address buyer);

    constructor() {
        // Add predefined products
        _listProduct(
            "Blockchain Basics",
            0.05 ether,
            "A beginner's guide to blockchain.",
            "https://example.com/ebook.jpg"
        );

        _listProduct(
            "DevTool Pro",
            0.1 ether,
            "Advanced developer toolkit.",
            "https://example.com/software.jpg"
        );

        _listProduct(
            "Crypto Art #1",
            0.08 ether,
            "Unique crypto-themed digital artwork.",
            "https://example.com/artwork.jpg"
        );
    }

    function listProduct(
        string memory name,
        uint256 price,
        string memory description,
        string memory imageURL
    ) public {
        require(price > 0, "Price must be greater than zero");

        productCount++;
        products[productCount] = Product(
            productCount,
            name,
            price,
            description,
            imageURL,
            payable(msg.sender),
            address(0)
        );

        salesHistory[msg.sender].push(productCount);

        emit ProductListed(productCount, name, price, msg.sender);
    }

    function buyProduct(uint256 id) public payable {
        Product storage product = products[id];
        require(product.id > 0, "Product does not exist");
        require(msg.value == product.price, "Incorrect price");
        require(product.buyer == address(0), "Product already sold");
        require(product.seller != msg.sender, "Seller cannot buy their own product");

        product.buyer = msg.sender;
        product.seller.transfer(msg.value);

        purchaseHistory[msg.sender].push(id);

        emit ProductPurchased(id, msg.sender);
    }

    function getMyPurchases() public view returns (uint256[] memory) {
        return purchaseHistory[msg.sender];
    }

    function getMySales() public view returns (uint256[] memory) {
        return salesHistory[msg.sender];
    }

    // Internal function to list predefined products
    function _listProduct(
        string memory name,
        uint256 price,
        string memory description,
        string memory imageURL
    ) internal {
        productCount++;
        products[productCount] = Product(
            productCount,
            name,
            price,
            description,
            imageURL,
            payable(address(this)),
            address(0)
        );
    }
}